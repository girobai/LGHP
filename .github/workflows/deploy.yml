# https://github.com/actions/starter-workflows/blob/main/pages/astro.yml
# https://docs.astro.build/en/getting-started/
name: Deploy to GitHub Pages

on:
  # Trigger the workflow every time you push to the `main` branch
  # Using a different branch name? Replace `main` with your branch’s name
  push:
    branches: [ 'main' ]
    # Trigger the action only when files change in the folders defined here:
    # paths: ['src/**', 'public/**']

  # Allows you to run this workflow manually from the Actions tab on GitHub.
  workflow_dispatch:

# Allow this job to clone the repo and create a page deployment
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  BUILD_PATH: "." # default value when not using subfolders
  # BUILD_PATH: subfolder

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository using git
        uses: actions/checkout@v4
      
      - name: 🔎 Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            echo "lockfile=yarn.lock" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            echo "lockfile=package-lock.json" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1
          fi
      
      - run: echo " github.workspace ${{ github.workspace }}"
      - run: echo " steps.detect-package-manager.outputs.manager ${{ steps.detect-package-manager.outputs.manager }}"
      - run: echo " steps.detect-package-manager.outputs.lockfile ${{ steps.detect-package-manager.outputs.lockfile }}"
      - run: echo " steps.detect-package-manager.outputs.command ${{ steps.detect-package-manager.outputs.command }}"
      - run: echo " env.BUILD_PATH ${{ env.BUILD_PATH }}"
      - run: echo " steps.detect-package-manager.outputs.runner ${{ steps.detect-package-manager.outputs.runner }}"
      - run: echo " steps.pages.outputs.origin ${{ steps.pages.outputs.origin }}"
      - run: echo " steps.pages.outputs.base_path ${{ steps.pages.outputs.base_path }}"
      - run: echo " steps.pages.outputs.origin ${{ steps.pages.outputs.origin }}"
      - run: echo " steps.deployment.outputs.page_url ${{ steps.deployment.outputs.page_url }}"

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: ${{ steps.detect-package-manager.outputs.manager }}
          cache-dependency-path: ${{ env.BUILD_PATH }}/${{ steps.detect-package-manager.outputs.lockfile }}

      - name: 📟 Setup Pages
        id: pages
        uses: actions/configure-pages@v5
      
      - name: 📒 Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
        working-directory: ${{ env.BUILD_PATH }}

      - name: 🔨 Build with Astro
        run: |
          ${{ steps.detect-package-manager.outputs.runner }} astro build \
            --site "${{ steps.pages.outputs.origin }}" \
            --base "${{ steps.pages.outputs.base_path }}"
        working-directory: ${{ env.BUILD_PATH }}

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ${{ env.BUILD_PATH }}/dist

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    needs: build
    runs-on: ubuntu-latest
    name: Deploy
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

